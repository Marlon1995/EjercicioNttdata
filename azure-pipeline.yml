trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  # Variables globales
  - group: KeyDecryptProd
  - name: 'AZURE_REGISTRY_URL'
    value: 'kfcregistry.azurecr.io'
  - name: 'AZURE_REGISTRY_USERNAME'
    value: 'kfcregistry'
  - name: 'AZURE_REGISTRY_PASSWORD'
    value: '$(KeyAzure)'
  - name: 'IMAGE_NAME'
    value: 'devops-microservice'
  - name: 'IMAGE_TAG'
    value: '$(Build.BuildId)'  # Usar el ID de la compilaci칩n como tag
  - name: 'NAMESPACE'
    value: 'devops-microservice'
  - name: 'CONTAINER'
    value: 'devops-microservice'
  - name: 'DEPLOY'
    value: 'devops-microservice'
  - name: 'BUILD_ARG'
    value: 'prod.devops'
  - name: 'SERVICE_AKS'
    value: 'aks-cluster-kfc'

stages:

# Etapa 1 - An치lisis est치tico de c칩digo
- stage: StaticCodeAnalysis
  displayName: 'Static Code Analysis with Flake8'
  jobs:
    - job: StaticAnalysis
      displayName: 'Run Static Code Analysis'
      pool:
        vmImage: ubuntu-latest
      steps:
        - script: |
            echo "Running Flake8 for static code analysis..."
            pip install flake8
            flake8 . --max-line-length=120
          displayName: 'Run Flake8 Analysis'

# Etapa 2 - Build Docker Image
- stage: BuildStage
  displayName: 'Build Docker Image'
  jobs:
    - job: Build
      displayName: 'Build Docker Image'
      pool:
        vmImage: ubuntu-latest
      steps:
        - task: Docker@2
          inputs:
            command: build
            repository: $(AZURE_REGISTRY_URL)/$(IMAGE_NAME)
            Dockerfile: '**/Dockerfile'
            tags: |
              $(IMAGE_TAG)
            buildContext: '.'
            arguments: |
              --build-arg argument=$(BUILD_ARG)
          displayName: 'Build Docker Image'

# Etapa 3 - Login y Push de Docker
- stage: PushStage
  displayName: 'Login and Push Docker Image'
  dependsOn: BuildStage
  jobs:
    - job: DockerLoginPush
      displayName: 'Docker Login and Push'
      pool:
        vmImage: ubuntu-latest
      steps:
        - script: |
            echo $(AZURE_REGISTRY_PASSWORD) | docker login $(AZURE_REGISTRY_URL) -u $(AZURE_REGISTRY_USERNAME) --password-stdin
          displayName: 'Docker Login'
          
        - task: Docker@2
          inputs:
            command: push
            repository: $(AZURE_REGISTRY_URL)/$(IMAGE_NAME)
            tags: |
              $(IMAGE_TAG)
          displayName: 'Push image to ACR'

# Etapa 4 - Ejecutar pruebas unitarias
- stage: TestStage
  displayName: 'Run Unit Tests'
  dependsOn: PushStage
  jobs:
    - job: RunTests
      displayName: 'Run Unit Tests'
      pool:
        vmImage: ubuntu-latest
      steps:
        - script: |
            echo "Running unit tests inside Docker container..."
            docker run --rm $(AZURE_REGISTRY_URL)/$(IMAGE_NAME):$(IMAGE_TAG) npm run test  # Asumiendo que las pruebas son con npm
          displayName: 'Run Unit Tests'

# Etapa 5 - Despliegue en AKS
- stage: DeployStage
  displayName: 'Deploy to AKS'
  dependsOn: TestStage
  jobs:
    - job: DeployToAKS
      displayName: 'Deploy to AKS'
      pool:
        vmImage: ubuntu-latest
      steps:
        - task: Kubernetes@1
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: $(SERVICE_AKS)
            namespace: $(NAMESPACE)
            command: 'set'
            arguments: 'image deployment/$(DEPLOY) $(CONTAINER)=$(AZURE_REGISTRY_URL)/$(IMAGE_NAME):$(IMAGE_TAG)'
            secretType: 'dockerRegistry'
            containerRegistryType: 'Azure Container Registry'
          displayName: 'Set New Image in AKS Deployment'
