trigger:
- qa

pool:
  vmImage: ubuntu-latest

variables:
  - group: KeyDecryptProd
  - name: 'AZURE_REGISTRY_URL'
    value: 'kfcregistry.azurecr.io'
  - name: 'AZURE_REGISTRY_USERNAME'
    value: 'kfcregistry'
  - name: 'AZURE_REGISTRY_PASSWORD'
    value: '$(KeyAzure)'
  - name: 'IMAGE_NAME'
    value: 'qa-devops-microservice'
  - name: 'IMAGE_TAG'
    value: '$(Build.BuildId)'  # Usar el ID de la compilación como tag
  - name: 'NAMESPACE'
    value: 'qa-devops-microservice'
  - name: 'CONTAINER'
    value: 'qa-devops-microservice'
  - name: 'DEPLOY'
    value: 'qa-devops-microservice'
  - name: 'BUILD_ARG'
    value: 'prod.devops'
  - name: 'SERVICE_AKS'
    value: 'aks-cluster-kfc'

stages:

# Etapa 1 - Análisis estático de código
- stage: LintStage
  displayName: 'Run Linting (flake8)'
  jobs:
    - job: Lint
      displayName: 'Run Flake8 Linting'
      pool:
        vmImage: ubuntu-latest
      steps:
        - script: |
            echo "Running flake8 analysis..."
            pip install flake8
            flake8 . || true  # La parte || true asegura que el paso no falle aunque haya errores
          displayName: 'Run flake8'

# Etapa 2 - Build y Push Docker Image
- stage: BuildAndPushStage
  displayName: 'Build and Push Docker Image'
  jobs:
    - job: BuildAndPush
      displayName: 'Build and Push Docker Image'
      pool:
        vmImage: ubuntu-latest
      steps:
        - script: |
            echo "Building Docker image..."
            docker build -t $(AZURE_REGISTRY_URL)/$(IMAGE_NAME):$(IMAGE_TAG) --build-arg argument=$(BUILD_ARG) .
          displayName: 'Build Docker Image'

        - script: |
            echo $(AZURE_REGISTRY_PASSWORD) | docker login $(AZURE_REGISTRY_URL) -u $(AZURE_REGISTRY_USERNAME) --password-stdin
          displayName: 'Docker Login'

        - script: |
            docker push $(AZURE_REGISTRY_URL)/$(IMAGE_NAME):$(IMAGE_TAG)
          displayName: 'Push Docker Image to ACR'

# Etapa 3 - Ejecutar pruebas unitarias
- stage: TestStage
  displayName: 'Run Unit Tests'
  dependsOn: BuildAndPushStage
  jobs:
    - job: RunTests
      displayName: 'Run Unit Tests'
      pool:
        vmImage: ubuntu-latest
      steps:
        - script: |
            echo "Running unit tests inside Docker container..."
            docker run --rm $(AZURE_REGISTRY_URL)/$(IMAGE_NAME):$(IMAGE_TAG) npm run test || true  # Permite que el pipeline continúe incluso si hay un error
          displayName: 'Run Unit Tests'

# Etapa 4 - Despliegue en AKS
- stage: DeployStage
  displayName: 'Deploy to AKS'
  dependsOn: TestStage
  jobs:
    - job: DeployToAKS
      displayName: 'Deploy to AKS'
      pool:
        vmImage: ubuntu-latest
      steps:
        - task: Kubernetes@1
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: $(SERVICE_AKS)
            namespace: $(NAMESPACE)
            command: 'set'
            arguments: 'image deployment/$(DEPLOY) $(CONTAINER)=$(AZURE_REGISTRY_URL)/$(IMAGE_NAME):$(IMAGE_TAG)'
            secretType: 'dockerRegistry'
            containerRegistryType: 'Azure Container Registry'
          displayName: 'Set New Image in AKS Deployment'
