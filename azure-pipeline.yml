trigger:
- master
- qa
- dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  IMAGE_NAME: 'devops-microservice'
  CONTAINER: 'devops-microservice'
  DEPLOY: 'devops-microservice'
  NAMESPACE: 'devops-microservice'  # El namespace es el mismo para todos los entornos
  AZURE_REGISTRY_URL: 'kfcregistry.azurecr.io'

  # Imagen Tag default (se configurará según la rama en los pasos)
  IMAGE_TAG: 'latest'  # Default value, se sobrescribirá en los pasos

stages:
- stage: Build
  displayName: 'Build Docker Image'
  jobs:
    - job: Build
      displayName: 'Build Docker Image'
      steps:
        - script: |
            if [ "$(Build.SourceBranchName)" == "master" ]; then
              echo "##vso[task.setvariable variable=IMAGE_TAG]latest"
            elif [ "$(Build.SourceBranchName)" == "qa" ]; then
              echo "##vso[task.setvariable variable=IMAGE_TAG]qa"
            elif [ "$(Build.SourceBranchName)" == "dev" ]; then
              echo "##vso[task.setvariable variable=IMAGE_TAG]dev"
            fi
          displayName: 'Set IMAGE_TAG based on branch'

        - task: Docker@2
          inputs:
            command: build
            repository: $(AZURE_REGISTRY_URL)/$(IMAGE_NAME)
            Dockerfile: 'Dockerfile'
            tags: |
              $(IMAGE_TAG)
          displayName: 'Build Docker Image'
           # Verificar que la imagen se construyó correctamente
        - script: |
            docker images
          displayName: 'List Docker Images'

- stage: Push
  displayName: 'Push Docker Image to ACR'
  jobs:
    - job: Push
      displayName: 'Push Image to ACR'
      steps:
        - task: Docker@2
          inputs:
            command: push
            repository: '$(AZURE_REGISTRY_URL)/$(IMAGE_NAME)'
            tags: |
              $(IMAGE_TAG)
            containerRegistry: 'SC_ACR_GRUPOKFC_DEV'
          displayName: 'Push image to ACR'

- stage: DeployToEnvironment
  displayName: 'Deploy to Environment'
  dependsOn: Push
  jobs:
    - job: Deploy
      displayName: 'Deploy to Environment'
      steps:
        - ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
            - task: Kubernetes@1
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: 'aks-cluster-kfc'
                namespace: $(NAMESPACE)
                command: 'set'
                arguments: 'image deployment/$(DEPLOY) $(CONTAINER)=$(AZURE_REGISTRY_URL)/$(IMAGE_NAME):$(IMAGE_TAG)'
                secretType: 'dockerRegistry'
                containerRegistryType: 'Azure Container Registry'
                containerRegistry: 'SC_ACR_GRUPOKFC_DEV'
              displayName: 'Update Kubernetes Deployment (Prod)'

        - ${{ if eq(variables['Build.SourceBranchName'], 'qa') }}:
            - task: Kubernetes@1
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: 'aks-cluster-kfc'
                namespace: $(NAMESPACE)
                command: 'set'
                arguments: 'image deployment/$(DEPLOY) $(CONTAINER)=$(AZURE_REGISTRY_URL)/$(IMAGE_NAME):$(IMAGE_TAG)'
                secretType: 'dockerRegistry'
                containerRegistryType: 'Azure Container Registry'
                containerRegistry: 'SC_ACR_GRUPOKFC_DEV'
              displayName: 'Update Kubernetes Deployment (QA)'

        - ${{ if eq(variables['Build.SourceBranchName'], 'dev') }}:
            - task: Kubernetes@1
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: 'aks-cluster-kfc'
                namespace: $(NAMESPACE)
                command: 'set'
                arguments: 'image deployment/$(DEPLOY) $(CONTAINER)=$(AZURE_REGISTRY_URL)/$(IMAGE_NAME):$(IMAGE_TAG)'
                secretType: 'dockerRegistry'
                containerRegistryType: 'Azure Container Registry'
                containerRegistry: 'SC_ACR_GRUPOKFC_DEV'
              displayName: 'Update Kubernetes Deployment (Dev)'
