trigger:
- master
- qa
- dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  IMAGE_NAME: 'devops-microservice'
  CONTAINER: 'devops-microservice'
  DEPLOY: 'devops-microservice'
  NAMESPACE: 'devops-microservice'  # El namespace es el mismo para todos los entornos
  AZURE_REGISTRY_URL: 'kfcregistry.azurecr.io'

  # Imagen Tag default (se configurará según la rama en los pasos)
  IMAGE_TAG: 'latest'  # Default value, se sobrescribirá en los pasos

jobs:
- job: BuildAndDeploy
  displayName: 'Build, Push and Deploy Docker Image'
  steps:

    # Paso para establecer el valor de IMAGE_TAG basado en la rama
    - script: |
        if [ "$(Build.SourceBranchName)" == "master" ]; then
          echo "##vso[task.setvariable variable=IMAGE_TAG]latest"
        elif [ "$(Build.SourceBranchName)" == "qa" ]; then
          echo "##vso[task.setvariable variable=IMAGE_TAG]qa"
        elif [ "$(Build.SourceBranchName)" == "dev" ]; then
          echo "##vso[task.setvariable variable=IMAGE_TAG]dev"
        fi
      displayName: 'Set IMAGE_TAG based on branch'

    # Paso para construir la imagen Docker
    - task: Docker@2
      inputs:
        command: build
        repository: $(AZURE_REGISTRY_URL)/$(IMAGE_NAME)
        Dockerfile: 'Dockerfile'
        tags: |
          $(IMAGE_TAG)
      displayName: 'Build Docker Image'

    # Paso para verificar que la imagen se construyó correctamente
    - script: |
        docker images
      displayName: 'List Docker Images'

    # Paso para autenticar con Azure Container Registry
    - task: Docker@2
      inputs:
        command: login
        containerRegistry: 'SC_ACR_GRUPOKFC_DEV'
      displayName: 'Login to Azure Container Registry'

    # Paso para empujar la imagen a ACR
    - task: Docker@2
      inputs:
        command: push
        repository: '$(AZURE_REGISTRY_URL)/$(IMAGE_NAME)'
        tags: |
          $(IMAGE_TAG)
        containerRegistry: 'SC_ACR_GRUPOKFC_DEV'
      displayName: 'Push image to ACR'

    # Paso para realizar el despliegue en función de la rama
    - script: |
        if [ "$(Build.SourceBranchName)" == "master" ]; then
          kubectl set image deployment/$(DEPLOY) $(CONTAINER)=$(AZURE_REGISTRY_URL)/$(IMAGE_NAME):$(IMAGE_TAG) --namespace=$(NAMESPACE)
        elif [ "$(Build.SourceBranchName)" == "qa" ]; then
          kubectl set image deployment/$(DEPLOY) $(CONTAINER)=$(AZURE_REGISTRY_URL)/$(IMAGE_NAME):$(IMAGE_TAG) --namespace=$(NAMESPACE)
        elif [ "$(Build.SourceBranchName)" == "dev" ]; then
          kubectl set image deployment/$(DEPLOY) $(CONTAINER)=$(AZURE_REGISTRY_URL)/$(IMAGE_NAME):$(IMAGE_TAG) --namespace=$(NAMESPACE)
        fi
      displayName: 'Update Kubernetes Deployment'
