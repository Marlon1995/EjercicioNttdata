# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
#VARIABLES OF LIBRARY
- group: KeyDecryptProd
#VARIABLES GLOBAL FOR DEPLOY
- name: 'AZURE_REGISTRY_URL'
  value: 'kfcregistry.azurecr.io'
- name: 'AZURE_REGISTRY_USERNAME'
  value: 'kfcregistry'
- name: 'AZURE_REGISTRY_PASSWORD'
  value: '$(KeyAzure)'
- name: 'IMAGE_NAME'
  value: 'devops-microservice'
- name: 'IMAGE_TAG'
  value: 'latest'
- name: 'NAMESPACE'
  value: 'devops-microservice'
- name: 'CONTAINER'
  value: 'devops-microservice'
- name: 'DEPLOY'
  value: 'devops-microservice'
- name: 'BUILD_ARG'
  value: 'prod.devops'
- name: 'SERVICE_AKS'
  value: 'aks-cluster-kfc'

steps:
- task: Docker@2
  inputs:
    command: build
    repository: $(AZURE_REGISTRY_URL)/$(IMAGE_NAME)
    Dockerfile: '**/Dockerfile'
    tags: |
      $(IMAGE_TAG)
    buildContext: '.'
    arguments: |
      --build-arg argument=$(BUILD_ARG)
  displayName: 'Build Docker Image'

- script: |
    echo $(AZURE_REGISTRY_PASSWORD) | docker login $(AZURE_REGISTRY_URL) -u $(AZURE_REGISTRY_USERNAME) --password-stdin
  displayName: 'Docker login'

- task: Docker@2
  inputs:
    command: push
    repository: $(AZURE_REGISTRY_URL)/$(IMAGE_NAME)
    tags: |
      $(IMAGE_TAG)
  displayName: 'Push image to ACR'

- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: $(SERVICE_AKS)
    namespace: $(NAMESPACE)
    command: 'set'
    arguments: 'image deployment/$(DEPLOY) $(CONTAINER)=$(AZURE_REGISTRY_URL)/$(IMAGE_NAME):$(IMAGE_TAG)'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'